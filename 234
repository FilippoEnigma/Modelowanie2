module PetriNetTransformation;

create OUT : TARGET from IN : SOURCE;

-- Transformacja modelu
rule Model2Model {
    from
        src : SOURCE!Model
    to
        tgt : TARGET!Model (
            name <- src.name,
            place <- src.place->collect(e | thisModule.Place2Place(e)),
            transition <- src.transition->collect(e | thisModule.Transition2Transition(e)),
            arcp2t <- src.arc->select(a | a.P2T)->collect(e | thisModule.Arc2ArcP2T(e)),
            arct2p <- src.arc->select(a | a.T2P)->collect(e | thisModule.Arc2ArcT2P(e))
        )
}

-- Transformacja Place
rule Place2Place {
    from
        src : SOURCE!Place
    to
        tgt : TARGET!Place (
            name <- src.name,
            tokens <- src.tokens
        )
}

-- Transformacja Transition
rule Transition2Transition {
    from
        src : SOURCE!Transition
    to
        tgt : TARGET!Transition (
            name <- src.name
        )
}

-- Transformacja Arc do ArcP2T
rule Arc2ArcP2T {
    from
        src : SOURCE!Arc (src.P2T = true)
    to
        tgt : TARGET!ArcP2T (
            name <- src.name,
            weight <- src.weight,
            inhibitor <- src.inhibitor,
            place <- thisModule.resolvePlace(src.source),
            transition <- thisModule.resolveTransition(src.target)
        )
}

-- Transformacja Arc do ArcT2P
rule Arc2ArcT2P {
    from
        src : SOURCE!Arc (src.T2P = true)
    to
        tgt : TARGET!ArcT2P (
            name <- src.name,
            weight <- src.weight,
            place <- thisModule.resolvePlace(src.target),
            transition <- thisModule.resolveTransition(src.source)
        )
}

-- Pomocnicze funkcje do rozwiÄ…zywania referencji
helper def : resolvePlace(p : SOURCE!Place) : TARGET!Place =
    TARGET!Place.allInstances()->select(e | e.name = p.name)->first();

helper def : resolveTransition(t : SOURCE!Transition) : TARGET!Transition =
    TARGET!Transition.allInstances()->select(e | e.name = t.name)->first();
